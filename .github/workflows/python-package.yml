# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python checks

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    - run: git fetch origin develop
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Setup Graphviz
      uses: ts-graphviz/setup-graphviz@v1
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      #----------------------------------------------
      #              run ruff
      #----------------------------------------------
    - name: Linter with ruff
      run: |
        source .venv/bin/activate
        ruff .
      #----------------------------------------------
      #              run black
      #----------------------------------------------
    - name: Linter with black
      run: |
        source .venv/bin/activate
        black . --check --diff
      #----------------------------------------------
      #              run pytest
      #----------------------------------------------
    - name: Test with pytest
      run: |
        source .venv/bin/activate
        pytest --cov-report=xml --junitxml=xunit-results.xml
        coverage xml
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          coverage.xml
          xunit-results.xml
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.organization=fgmacedo
          -Dsonar.projectKey=fgmacedo_python-statemachine
          -Dsonar.python.coverage.reportPaths=coverage.xml
          -Dsonar.sources=statemachine/
          -Dsonar.test.exclusions=tests/**
          -Dsonar.tests=tests/
          -Dsonar.python.version=3
          -Dsonar.verbose=false
