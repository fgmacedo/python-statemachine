# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python checks

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.7", "3.8", "3.9", "3.10", "3.11", "3.12", "3.13.0-rc.1"]

    steps:
    - uses: actions/checkout@v3
    - run: git fetch origin develop
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Setup Graphviz
      uses: ts-graphviz/setup-graphviz@v1
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.5.1
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root --all-extras
    - name: Install old pydot for 3.7 only
      if: matrix.python-version == 3.7
      run: |
        source .venv/bin/activate
        pip install pydot==2.0.0
      #----------------------------------------------
      #              run ruff
      #----------------------------------------------
    - name: Linter with ruff
      if: matrix.python-version == 3.12
      run: |
        source .venv/bin/activate
        ruff check .
        ruff format --check .
      #----------------------------------------------
      #              run pytest
      #----------------------------------------------
    - name: Test with pytest
      run: |
        source .venv/bin/activate
        pytest --cov-report=xml:coverage.xml
        coverage xml
      #----------------------------------------------
      #          upload coverage
      #----------------------------------------------
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.python-version == 3.12
      with:
        token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos
        directory: .
        env_vars: OS,PYTHON
        fail_ci_if_error: true
        flags: unittests
        name: codecov-umbrella
        verbose: true
