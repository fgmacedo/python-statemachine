<?xml version="1.0" encoding="UTF-8"?>
<scxml datamodel="ecmascript" initial="s0" name="ScxmlTest207" version="1.0"
	xmlns="http://www.w3.org/2005/07/scxml" xmlns:conf="http://www.w3.org/2005/scxml-conformance"><!--We
	test that that we can't cancel an event in another session.
We invoke a child process. It notifies us when it has generated
a delayed event with sendid `foo`.  We try to cancel `foo`.
The child  process sends us event.
Event success if the event is not cancelled, event fail otherwise.
This doesn't test that there is absolutely no way to cancel an event
raised in another session, but the spec doesn't define any way
to refer to an event in another process-->
	<state id="s0" initial="s01">
		<onentry>
			<send delayexpr="'2s'" event="timeout" />
		</onentry>
		<invoke type="scxml">
			<content>
				<scxml datamodel="ecmascript" initial="sub0" name="ScxmlSub" version="1.0"
					xmlns="http://www.w3.org/2005/07/scxml">
					<state id="sub0">
						<onentry>
							<send delayexpr="'1s'" event="event1" id="foo" />
							<send delayexpr="'1.5s'" event="event2" />
							<send event="childToParent" target="#_parent" />
						</onentry>
						<transition event="event1" target="subFinal">
							<send target="#_parent" event="pass" />
						</transition>
						<transition event="*" target="subFinal">
							<send target="#_parent" event="fail" />
						</transition>
					</state>
					<final id="subFinal" />
				</scxml><!--when
				invoked, we raise a delayed event1 with sendid 'foo' and notify our parent.  Then we
				wait.
      If event1 occurs, the parent hasn't succeeded in canceling it and we return pass.  If event2 occurs
      it means event1 was canceled (because event2 is delayed longer than event1) and we return
				'fail'.-->
			</content>
		</invoke>
		<transition event="timeout" target="fail" />
		<state id="s01">
			<transition event="childToParent" target="s02">
				<cancel sendid="foo" />
			</transition>
		</state>
		<state id="s02">
			<transition event="pass" target="pass" />
			<transition event="fail" target="fail" />
		</state>
	</state>
	<final id="pass">
		<onentry>
			<log expr="'pass'" label="Outcome" />
		</onentry>
	</final>
	<final id="fail">
		<onentry>
			<log expr="'fail'" label="Outcome" />
		</onentry>
	</final>
</scxml>
