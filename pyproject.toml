[tool.poetry]
name = "python-statemachine"
version = "2.1.2"
description = "Python Finite State Machines made easy."
authors = ["Fernando Macedo <fgmacedo@gmail.com>"]
maintainers = [
    "Fernando Macedo <fgmacedo@gmail.com>",
]
license = "MIT license"
readme = "README.md"
homepage = "https://github.com/fgmacedo/python-statemachine"
packages = [
    {include = "statemachine"},
    {include = "statemachine/**/*.py" },
]
include = [
    { path = "statemachine/locale/**/*.po", format = "sdist" },
    { path = "statemachine/locale/**/*.mo", format = ["sdist", "wheel"] }
]
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries"
]

[tool.poetry.extras]
diagrams = ["pydot"]

[tool.poetry.dependencies]
python = ">=3.9, <3.13"

[tool.poetry.group.dev.dependencies]
pytest = "^8.1.1"
pytest-cov = "^5.0.0"
pytest-sugar = "^1.0.0"
pydot = "^2.0.0"
ruff = "^0.3.7"
pre-commit = "^3.7.0"
mypy = "^1.9.0"
pdbpp = "^0.10.3"
pytest-mock = "^3.10.0"
pytest-profiling = "^1.7.0"
pytest-benchmark = "^4.0.0"

[tool.poetry.group.docs.dependencies]
Sphinx = "7.2.6"
sphinx-rtd-theme = "2.0.0"
myst-parser = "^2.0.0"
sphinx-gallery = "^0.15.0"
pillow = "^10.3.0"
sphinx-autobuild = "^2024.4.16"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
addopts = "--ignore=docs/conf.py --ignore=docs/auto_examples/ --ignore=docs/_build/ --ignore=tests/examples/ --cov --cov-config .coveragerc --doctest-glob='*.md' --doctest-modules --doctest-continue-on-failure --benchmark-autosave"
doctest_optionflags = "ELLIPSIS IGNORE_EXCEPTION_DETAIL NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disable_error_code = "annotation-unchecked"

[[tool.mypy.overrides]]
module = [
    'django.*',
    'pytest.*',
    'pydot.*',
    'sphinx_gallery.*',
]
ignore_missing_imports = true

[tool.flake8]
ignore = [
    "E231",
    "W503",
]
max-line-length = 99

[tool.ruff]
src = ["statemachine"]

line-length = 99
target-version = "py312"

# Exclude a variety of commonly ignored directories.
exclude = [
    ".direnv",
    ".eggs",
    ".git",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "auto_examples",
    "venv",
]

[tool.ruff.lint]

# Enable Pyflakes and pycodestyle rules.
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "I", # isort
    "UP", # pyupgrade
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "PT", # flake8-pytest-style
]
ignore = [
    "UP006", # `use-pep585-annotation` Requires Python3.9+
    "UP035", # `use-pep585-annotation` Requires Python3.9+
    "UP038", # `use-pep585-annotation` Requires Python3.9+
]

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
# Ignore `E402` (import violations) in all `__init__.py` files, and in `path/to/file.py`.
"__init__.py" = ["E402"]
"path/to/file.py" = ["E402"]
"tests/examples/**.py" = ["B018"]

[tool.ruff.lint.mccabe]
max-complexity = 6

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings.
convention = "google"

[tool.coverage.run]
branch = true
relative_files = true
data_file = ".coverage"
source = [
    "statemachine",
]
omit = [
    "*test*.py",
    "tmp/*",
    "pytest_cov",
]
[tool.coverage.report]
show_missing = true
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",
   "if TYPE_CHECKING",
]

[tool.coverage.html]
directory = "tmp/htmlcov"
